library("readxl")
library("dplyr")
#read in all 6 tables
my_data1 <- read_excel("./FPKM_Data/Data1.xlsx")
View(my_data1)
my_data2 <- read_excel("./FPKM_Data/Data2.xlsx")
View(my_data2)
my_data3 <- read_excel("./FPKM_Data/Data3.xlsx")
View(my_data3)
my_data4 <- read_excel("./FPKM_Data/Data4.xlsx")
View(my_data4)
my_data5 <- read_excel("./FPKM_Data/Data5.xlsx")
View(my_data5)
my_data6 <- read_excel("./FPKM_Data/Data6.xlsx")
View(my_data6)
#merge all of the A, B and C tables in their own 3 tables
tableA <- union_all(my_data1,my_data2)
View(tableA)
tableB <- union_all(my_data4,my_data6)
View(tableB)
tableC <- union_all(my_data3,my_data5)
View(tableC)
#issues: the three tables don't seem to have any genes in common
#not sure what to do next
mergeAB <- union_all(tableA, tableB)
View(mergeAB)
mergeAll <- union_all(mergeAB, tableC)
View(mergeAll)
expressionMatrix <- mergeAll[!duplicated(mergeAll$gene_id), ]
library("readxl")
library("dplyr")
#read in all 6 tables
#my_data1 <- read_excel("./FPKM_Data/Data1.xlsx")
#View(my_data1)
#my_data2 <- read_excel("./FPKM_Data/Data2.xlsx")
#View(my_data2)
my_data3 <- read_excel("./FPKM_Data/Data3.xlsx")
View(my_data3)
my_data4 <- read_excel("./FPKM_Data/Data4.xlsx")
View(my_data4)
my_data5 <- read_excel("./FPKM_Data/Data5.xlsx")
View(my_data5)
my_data6 <- read_excel("./FPKM_Data/Data6.xlsx")
View(my_data6)
#merge all of the A, B and C tables in their own 3 tables
#tableA <- union_all(my_data1,my_data2)
#View(tableA)
tableB <- union_all(my_data4,my_data6)
View(tableB)
tableC <- union_all(my_data3,my_data5)
View(tableC)
#issues: the three tables don't seem to have any genes in common
#not sure what to do next
#mergeAB <- union_all(tableA, tableB)
#View(mergeAB)
mergeAll <- union_all(tableB, tableC)
View(mergeAll)
expressionMatrix <- mergeAll[!duplicated(mergeAll$gene_id), ]
library(biomaRt)
library("readxl")
library("dplyr")
#read in all 6 tables
#my_data1 <- read_excel("./FPKM_Data/Data1.xlsx")
#View(my_data1)
#my_data2 <- read_excel("./FPKM_Data/Data2.xlsx")
#View(my_data2)
my_data3 <- read_excel("./FPKM_Data/Data3.xlsx")
View(my_data3)
my_data4 <- read_excel("./FPKM_Data/Data4.xlsx")
View(my_data4)
my_data5 <- read_excel("./FPKM_Data/Data5.xlsx")
View(my_data5)
my_data6 <- read_excel("./FPKM_Data/Data6.xlsx")
View(my_data6)
#merge all of the A, B and C tables in their own 3 tables
#tableA <- union_all(my_data1,my_data2)
#View(tableA)
tableB <- union_all(my_data4,my_data6)
View(tableB)
tableC <- union_all(my_data3,my_data5)
View(tableC)
#issues: the three tables don't seem to have any genes in common
#not sure what to do next
#mergeAB <- union_all(tableA, tableB)
#View(mergeAB)
mergeAll <- union_all(tableB, tableC)
View(mergeAll)
expressionMatrix <- mergeAll[!duplicated(mergeAll$gene_id), ]
View(expressionMatrix)
library("readxl")
library("dplyr")
#read in all 6 tables
#my_data1 <- read_excel("./FPKM_Data/Data1.xlsx")
#View(my_data1)
#my_data2 <- read_excel("./FPKM_Data/Data2.xlsx")
#View(my_data2)
my_data3 <- read_excel("./FPKM_Data/Data3.xlsx")
View(my_data3)
my_data4 <- read_excel("./FPKM_Data/Data4.xlsx")
View(my_data4)
my_data5 <- read_excel("./FPKM_Data/Data5.xlsx")
View(my_data5)
my_data6 <- read_excel("./FPKM_Data/Data6.xlsx")
View(my_data6)
#merge all of the A, B and C tables in their own 3 tables
#tableA <- union_all(my_data1,my_data2)
#View(tableA)
tableB <- union_all(my_data6,my_data4)
View(tableB)
tableC <- union_all(my_data5,my_data3)
View(tableC)
#issues: the three tables don't seem to have any genes in common
#not sure what to do next
#mergeAB <- union_all(tableA, tableB)
#View(mergeAB)
mergeAll <- union_all(tableB, tableC)
View(mergeAll)
expressionMatrix <- mergeAll[!duplicated(mergeAll$gene_id), ]
View(expressionMatrix)
library("readxl")
library("dplyr")
library("ggplot2")
#read in all 6 tables
#my_data1 <- read_excel("./FPKM_Data/Data1.xlsx")
#View(my_data1)
#my_data2 <- read_excel("./FPKM_Data/Data2.xlsx")
#View(my_data2)
my_data3 <- read_excel("./FPKM_Data/Data3.xlsx")
View(my_data3)
my_data4 <- read_excel("./FPKM_Data/Data4.xlsx")
View(my_data4)
my_data5 <- read_excel("./FPKM_Data/Data5.xlsx")
View(my_data5)
my_data6 <- read_excel("./FPKM_Data/Data6.xlsx")
View(my_data6)
#merge all of the A, B and C tables in their own 3 tables
#tableA <- union_all(my_data1,my_data2)
#View(tableA)
table_b <- union_all(my_data6,my_data4)
View(table_c)
table_c <- union_all(my_data5,my_data3)
View(table_c)
#issues: the three tables don't seem to have any genes in common
#not sure what to do next
#mergeAB <- union_all(tableA, tableB)
#View(mergeAB)
merge_all <- union_all(table_b, table_c)
View(merge_all)
expression_matrix <- merge_all[!duplicated(merge_all$gene_id), ]
View(expression_matrix)
density_plot_data <- read_excel("./DensityPlotData.xlsx")
View(density_plot_data)
ggplot(density_plot_data, aes(log2(x = x), fill = Sample)) + geom_density(alpha = .2)
library("readxl")
library("dplyr")
library("ggplot2")
#read in all 6 tables
#my_data1 <- read_excel("./FPKM_Data/Data1.xlsx")
#View(my_data1)
#my_data2 <- read_excel("./FPKM_Data/Data2.xlsx")
#View(my_data2)
my_data3 <- read_excel("./FPKM_Data/Data3.xlsx")
View(my_data3)
my_data4 <- read_excel("./FPKM_Data/Data4.xlsx")
View(my_data4)
my_data5 <- read_excel("./FPKM_Data/Data5.xlsx")
View(my_data5)
my_data6 <- read_excel("./FPKM_Data/Data6.xlsx")
View(my_data6)
#merge all of the A, B and C tables in their own 3 tables
#tableA <- union_all(my_data1,my_data2)
#View(tableA)
table_b <- union_all(my_data6,my_data4)
View(table_c)
table_c <- union_all(my_data5,my_data3)
View(table_c)
#issues: the three tables don't seem to have any genes in common
#not sure what to do next
#mergeAB <- union_all(tableA, tableB)
#View(mergeAB)
merge_all <- union_all(table_b, table_c)
View(merge_all)
expression_matrix <- merge_all[!duplicated(merge_all$gene_id), ]
View(expression_matrix)
density_plot_data <- read_excel("./DensityPlotData.xlsx")
View(density_plot_data)
ggplot(density_plot_data, aes(log2(x = x), fill = Sample)) + geom_density(alpha = .2)
library("readxl")
library("readxl")
library("dplyr")
library(BiocManager)
library(DESeq2)
library(tidyverse)
library(ggplot2)
library(tibble)
#loading the created expression matrix
expression_matrix <- read.csv("./expressionMatrix.csv", header = TRUE)
View(expression_matrix)
#creating count_data to be used in dds plot object
count_data = expression_matrix[, 2:55]
#making sure there are no NULL values in the matrix
count_data[is.na(count_data)] = 0
#scaling matrix to make sure there are no 0s by adding 1 to each value
i1 <-which(sapply(count_data, is.numeric))
count_data[i1] <- count_data[i1] +1
View(count_data)
#loading in the metadata
meta_matrix <-read.csv("./gse_matrix.csv", header = TRUE)
View(meta_matrix)
#removing column for gene_id to make sure col and rows of the 2 matrices match up
col_data = meta_matrix %>% remove_rownames %>% column_to_rownames(var="name")
#making the colnames and rownames of both matrices in the same order
idx = match(rownames(col_data), colnames(count_data))
count_data = count_data[ , idx]
View(count_data)
View(col_data)
#creating an object for the pca plot
dds <- DESeqDataSetFromMatrix(countData = round(count_data),
colData = col_data,
design = ~ treatment.ch1)
#making sure that the rows and cols are in the same order
all(colnames(count_data) %in% rownames(col_data))
dds
#setting the factor level for comparison from refernce
dds$treatment.ch1 <- relevel(dds$treatment.ch1, ref = "non transported goats")
meta_matrix <- meta_matrix %>%
dplyr::mutate(
treatment.ch1 = factor(treatment.ch1, levels = c("non transported goats",
"180 minutes of transportation",
"30 minutes of transportation"))
)
levels(meta_matrix$treatment.ch1)
#plot object
vds<-vst(dds, blind=FALSE)
#plotting PCA
plotPCA(vds, intgroup=c("treatment.ch1"))
#T-SNE Plot
library(M3C)
tsne(count_data, label=as.factor(dds$treatment.ch1))
#volcano plot
#doing the differential analysis and storing it
dseq_obj <- DESeq(dds)
dseq_results <- results(dseq_obj)
head(dseq_results)
#make dataset into data frame
deseq_df <- dseq_results %>%
as.data.frame()
head(deseq_df)
#creating the volcano plot
volcano_plot <- EnhancedVolcano::EnhancedVolcano(
deseq_df,
lab = rownames(deseq_df),
x = "log2FoldChange",
y = "padj",
pCutoff = 0.01 # Loosen the cutoff since we supplied corrected p-values
)
#plotting the volcano plot
volcano_plot
#=======
#=======
library("readxl")
library("dplyr")
library(BiocManager)
library(DESeq2)
library(tidyverse)
library(ggplot2)
#loading the created expression matrix
expression_matrix <- read.csv("./expressionMatrix.csv", header = TRUE)
View(expression_matrix)
#creating count_data to be used in dds plot object
count_data = expression_matrix[, 2:55]
#making sure there are no NULL values in the matrix
count_data[is.na(count_data)] = 0
#scaling matrix to make sure there are no 0s by adding 1 to each value
i1 <-which(sapply(count_data, is.numeric))
count_data[i1] <- count_data[i1] +1
View(count_data)
#loading in the metadata
meta_matrix <-read.csv("./gse_matrix.csv", header = TRUE)
View(meta_matrix)
#removing column for gene_id to make sure col and rows of the 2 matrices match up
col_data = meta_matrix %>% remove_rownames %>% column_to_rownames(var="name")
#making the colnames and rownames of both matrices in the same order
idx = match(rownames(col_data), colnames(count_data))
count_data = count_data[ , idx]
View(count_data)
View(col_data)
#creating an object for the pca plot
dds <- DESeqDataSetFromMatrix(countData = round(count_data),
colData = col_data,
design = ~ treatment.ch1)
#making sure that the rows and cols are in the same order
all(colnames(count_data) %in% rownames(col_data))
dds
#setting the factor level for comparison from refernce
dds$treatment.ch1 <- relevel(dds$treatment.ch1, ref = "non transported goats")
dds <- DESeq(dds)
#plot object
vds<-vst(dds, blind=FALSE)
#plotting PCA
plotPCA(vds, intgroup=c("treatment.ch1"))
expression_data <- expression_matrix[, grep("B1_fpkm_CL|C27_fpkm_MI",colnames(expression_matrix))]
View(expression_data)
library(umap)
install.packages("umap")
install.packages("umap")
library(umap)
data_umap <- umap(count_data)
View(data_umap)
View(data_umap)
View(data_umap)
plot_umap(data_umap)
plot(data_umap)
View(dds)
View(deseq_df)
library("readxl")
library("dplyr")
library(BiocManager)
library(DESeq2)
library(tidyverse)
library(ggplot2)
library(tibble)
#loading the created expression matrix
expression_matrix <- read.csv("./expressionMatrix.csv", header = TRUE)
View(expression_matrix)
#creating count_data to be used in dds plot object
count_data = expression_matrix[, 2:55]
#making sure there are no NULL values in the matrix
count_data[is.na(count_data)] = 0
#scaling matrix to make sure there are no 0s by adding 1 to each value
i1 <-which(sapply(count_data, is.numeric))
count_data[i1] <- count_data[i1] +1
View(count_data)
#loading in the metadata
meta_matrix <-read.csv("./gse_matrix.csv", header = TRUE)
View(meta_matrix)
#removing column for gene_id to make sure col and rows of the 2 matrices match up
col_data = meta_matrix %>% remove_rownames %>% column_to_rownames(var="name")
#making the colnames and rownames of both matrices in the same order
idx = match(rownames(col_data), colnames(count_data))
count_data = count_data[ , idx]
View(count_data)
View(col_data)
#creating an object for the pca plot
dds <- DESeqDataSetFromMatrix(countData = round(count_data),
colData = col_data,
design = ~ treatment.ch1)
#making sure that the rows and cols are in the same order
all(colnames(count_data) %in% rownames(col_data))
dds
#setting the factor level for comparison from refernce
dds$treatment.ch1 <- relevel(dds$treatment.ch1, ref = "non transported goats")
meta_matrix <- meta_matrix %>%
dplyr::mutate(
treatment.ch1 = factor(treatment.ch1, levels = c("non transported goats",
"180 minutes of transportation",
"30 minutes of transportation"))
)
levels(meta_matrix$treatment.ch1)
#plot object
vds<-vst(dds, blind=FALSE)
#plotting PCA
plotPCA(vds, intgroup=c("treatment.ch1"))
#T-SNE Plot
library(M3C)
tsne(count_data, label=as.factor(dds$treatment.ch1))
#volcano plot
#doing the differential analysis and storing it
dseq_obj <- DESeq(dds)
dseq_results <- results(dseq_obj)
head(dseq_results)
#make dataset into data frame
deseq_df <- dseq_results %>%
as.data.frame()
head(deseq_df)
#creating the volcano plot
volcano_plot <- EnhancedVolcano::EnhancedVolcano(
deseq_df,
lab = rownames(deseq_df),
x = "log2FoldChange",
y = "padj",
pCutoff = 0.01 # Loosen the cutoff since we supplied corrected p-values
)
#plotting the volcano plot
volcano_plot
#=======
#=======
library("readxl")
library("dplyr")
library(BiocManager)
library(DESeq2)
library(tidyverse)
library(ggplot2)
#loading the created expression matrix
expression_matrix <- read.csv("./expressionMatrix.csv", header = TRUE)
View(expression_matrix)
#creating count_data to be used in dds plot object
count_data = expression_matrix[, 2:55]
#making sure there are no NULL values in the matrix
count_data[is.na(count_data)] = 0
#scaling matrix to make sure there are no 0s by adding 1 to each value
i1 <-which(sapply(count_data, is.numeric))
count_data[i1] <- count_data[i1] +1
View(count_data)
#loading in the metadata
meta_matrix <-read.csv("./gse_matrix.csv", header = TRUE)
View(meta_matrix)
#removing column for gene_id to make sure col and rows of the 2 matrices match up
col_data = meta_matrix %>% remove_rownames %>% column_to_rownames(var="name")
#making the colnames and rownames of both matrices in the same order
idx = match(rownames(col_data), colnames(count_data))
count_data = count_data[ , idx]
View(count_data)
View(col_data)
#creating an object for the pca plot
dds <- DESeqDataSetFromMatrix(countData = round(count_data),
colData = col_data,
design = ~ treatment.ch1)
#making sure that the rows and cols are in the same order
all(colnames(count_data) %in% rownames(col_data))
dds
#setting the factor level for comparison from refernce
dds$treatment.ch1 <- relevel(dds$treatment.ch1, ref = "non transported goats")
dds <- DESeq(dds)
#plot object
vds<-vst(dds, blind=FALSE)
#plotting PCA
plotPCA(vds, intgroup=c("treatment.ch1"))
#======UMAP
#library(umap)
#expression_data <- expression_matrix[, grep("B1_fpkm_CL|C27_fpkm_MI",colnames(expression_matrix))]
#data_umap <- umap(count_data)
#View(data_umap)
#plot(data_umap)
#Table of differentially expressed genes
gene_names <- expression_matrix[,1, drop = FALSE]
diff_exp <- cbind(gene_names, deseq_df)
View(diff_exp)
View(diff_exp)
