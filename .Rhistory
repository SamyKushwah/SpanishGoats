dds$treatment.ch1 <- relevel(dds$treatment.ch1, ref = "non transported goats")
dds <- DESeq(dds)
#plot object
vds<-vst(dds, blind=FALSE)
#plotting PCA
plotPCA(vds, intgroup=c("treatment.ch1"))
#======UMAP
#library(umap)
#expression_data <- expression_matrix[, grep("B1_fpkm_CL|C27_fpkm_MI",colnames(expression_matrix))]
#data_umap <- umap(count_data)
#View(data_umap)
#plot(data_umap)
#Table of differentially expressed genes
gene_names <- expression_matrix[,1, drop = FALSE]
diff_exp <- cbind(gene_names, deseq_df)
#find genes that have a p < .05
significant_genes <- subset(diff_exp, pvalue < .05)
#export the differentially expressed genes into their own table
write.xlsx(significant_genes, "significant_genes.xlsx")
# Method 2 gProfiler2
library(gprofiler2)
gene_list_names <- significant_genes$gene_id
gostres <- gost(query = gene_list_names,
organism = "chircus", ordered_query = FALSE,
multi_query = FALSE, significant = TRUE, exclude_iea = FALSE,
measure_underrepresentation = FALSE, evcodes = FALSE,
user_threshold = 0.05, correction_method = "g_SCS",
domain_scope = "annotated", custom_bg = NULL,
numeric_ns = "", sources = NULL, as_short_link = FALSE)
gostplot(gostres, capped = TRUE, interactive = TRUE)
plotPCA(vds, intgroup=c("treatment.ch1"))
load("~/Desktop/Assignment 3/GoatData.tsv")
library("readxl")
library("dplyr")
library(BiocManager)
library(DESeq2)
library(tidyverse)
library(ggplot2)
library(tibble)
library(xlsx)
#loading the created expression matrix
#expression_matrix <- read.csv("./expressionMatrix.csv", header = TRUE)
expression_matrix <- read.tsv("desktop/Assignment 3/GoatData.tsv", header = TRUE)
install.packages('readr')
install.packages("readr")
library("readxl")
library("dplyr")
library(BiocManager)
library(DESeq2)
library(tidyverse)
library(ggplot2)
library(tibble)
library(xlsx)
library(readr)
expression_matrix <- read_tsv("desktop/Assignment 3/GoatData.tsv", header = TRUE)
#loading the created expression matrix
#expression_matrix <- read.csv("./expressionMatrix.csv", header = TRUE)
expression_matrix <- read_tsv("desktop/Assignment 3/GoatData.tsv", header = TRUE)
expression_matrix <- read_tsv("desktop/Assignment 3/GoatData.tsv")
library("readxl")
library("dplyr")
library(BiocManager)
library(DESeq2)
library(tidyverse)
library(ggplot2)
library(tibble)
library(xlsx)
library(readr)
expression_matrix <- read_tsv("./GoatData.tsv")
View(expression_matrix)
#creating count_data to be used in dds plot object
count_data = expression_matrix[, 2:55]
#making sure there are no NULL values in the matrix
count_data[is.na(count_data)] = 0
#scaling matrix to make sure there are no 0s by adding 1 to each value
i1 <-which(sapply(count_data, is.numeric))
count_data[i1] <- count_data[i1] +1
View(count_data)
#loading in the metadata
meta_matrix <-read.csv("./gse_matrix.csv", header = TRUE)
View(meta_matrix)
#removing column for gene_id to make sure col and rows of the 2 matrices match up
col_data = meta_matrix %>% remove_rownames %>% column_to_rownames(var="name")
#making the colnames and rownames of both matrices in the same order
idx = match(rownames(col_data), colnames(count_data))
count_data = count_data[ , idx]
library("readxl")
library("dplyr")
library(BiocManager)
library(DESeq2)
library(tidyverse)
library(ggplot2)
library(tibble)
library(xlsx)
library(readr)
#loading the created expression matrix
#expression_matrix <- read.csv("./expressionMatrix.csv", header = TRUE)
expression_matrix <- read_tsv("./GoatDataModified.tsv")
View(expression_matrix)
#creating count_data to be used in dds plot object
count_data = expression_matrix[, 2:54]
#making sure there are no NULL values in the matrix
count_data[is.na(count_data)] = 0
#scaling matrix to make sure there are no 0s by adding 1 to each value
i1 <-which(sapply(count_data, is.numeric))
count_data[i1] <- count_data[i1] +1
View(count_data)
#loading in the metadata
meta_matrix <-read.csv("./gse_matrix2.csv", header = TRUE)
View(meta_matrix)
#removing column for gene_id to make sure col and rows of the 2 matrices match up
col_data = meta_matrix %>% remove_rownames %>% column_to_rownames(var="name")
#making the colnames and rownames of both matrices in the same order
idx = match(rownames(col_data), colnames(count_data))
count_data = count_data[ , idx]
View(count_data)
View(col_data)
#creating an object for the pca plot
dds <- DESeqDataSetFromMatrix(countData = round(count_data),
colData = col_data,
design = ~ treatment.ch1)
#making sure that the rows and cols are in the same order
all(colnames(count_data) %in% rownames(col_data))
dds
#setting the factor level for comparison from refernce
dds$treatment.ch1 <- relevel(dds$treatment.ch1, ref = "non transported goats")
meta_matrix <- meta_matrix %>%
dplyr::mutate(
treatment.ch1 = factor(treatment.ch1, levels = c("non transported goats",
"180 minutes of transportation",
"30 minutes of transportation"))
)
levels(meta_matrix$treatment.ch1)
#plot object
vds<-vst(dds, blind=FALSE)
#plotting PCA
plotPCA(vds, intgroup=c("treatment.ch1")) + ggtitle("PCA Plot")
#=======
#=======
#T-SNE Plot
library(M3C)
tsne(count_data, label=as.factor(dds$treatment.ch1))
#=======
#=======
#volcano plot
#doing the differential analysis and storing it
dseq_obj <- DESeq(dds)
dseq_results <- results(dseq_obj)
head(dseq_results)
#make dataset into data frame
deseq_df <- dseq_results %>%
as.data.frame()
head(deseq_df)
#creating the volcano plot
volcano_plot <- EnhancedVolcano::EnhancedVolcano(
deseq_df,
lab = rownames(deseq_df),
x = "log2FoldChange",
y = "padj",
pCutoff = 0.01 # Loosen the cutoff since we supplied corrected p-values
)
#plotting the volcano plot
volcano_plot
#=======
#=======
library("readxl")
library("dplyr")
library(BiocManager)
library(DESeq2)
library(tidyverse)
library(ggplot2)
#loading the created expression matrix
expression_matrix <- read.csv("./expressionMatrix.csv", header = TRUE)
View(expression_matrix)
#creating count_data to be used in dds plot object
count_data = expression_matrix[, 2:55]
#making sure there are no NULL values in the matrix
count_data[is.na(count_data)] = 0
#scaling matrix to make sure there are no 0s by adding 1 to each value
i1 <-which(sapply(count_data, is.numeric))
count_data[i1] <- count_data[i1] +1
View(count_data)
#loading in the metadata
meta_matrix <-read.csv("./gse_matrix.csv", header = TRUE)
View(meta_matrix)
#removing column for gene_id to make sure col and rows of the 2 matrices match up
col_data = meta_matrix %>% remove_rownames %>% column_to_rownames(var="name")
#making the colnames and rownames of both matrices in the same order
idx = match(rownames(col_data), colnames(count_data))
count_data = count_data[ , idx]
View(count_data)
View(col_data)
#creating an object for the pca plot
dds <- DESeqDataSetFromMatrix(countData = round(count_data),
colData = col_data,
design = ~ treatment.ch1)
#making sure that the rows and cols are in the same order
all(colnames(count_data) %in% rownames(col_data))
dds
#setting the factor level for comparison from refernce
dds$treatment.ch1 <- relevel(dds$treatment.ch1, ref = "non transported goats")
dds <- DESeq(dds)
#plot object
vds<-vst(dds, blind=FALSE)
#plotting PCA
plotPCA(vds, intgroup=c("treatment.ch1"))
#Table of differentially expressed genes
gene_names <- expression_matrix[,1, drop = FALSE]
diff_exp <- cbind(gene_names, deseq_df)
#use gostres function to do enrichment analysis
gostres <- gost(query = gene_list_names,
organism = "chircus", ordered_query = FALSE,
multi_query = FALSE, significant = TRUE, exclude_iea = FALSE,
measure_underrepresentation = FALSE, evcodes = FALSE,
user_threshold = 0.05, correction_method = "g_SCS",
domain_scope = "annotated", custom_bg = NULL,
numeric_ns = "", sources = NULL, as_short_link = FALSE)
#export the differentially expressed genes into their own table
write.xlsx(significant_genes, "significant_genes.xlsx")
#Method 1 gProfiler2
library(gprofiler2)
#enrichement analysis using gprofiler
#get all the gene_ids of the statistically signigicant genes
gene_list_names <- significant_genes$gene_id
#use gostres function to do enrichment analysis
gostres <- gost(query = gene_list_names,
organism = "chircus", ordered_query = FALSE,
multi_query = FALSE, significant = TRUE, exclude_iea = FALSE,
measure_underrepresentation = FALSE, evcodes = FALSE,
user_threshold = 0.05, correction_method = "g_SCS",
domain_scope = "annotated", custom_bg = NULL,
numeric_ns = "", sources = NULL, as_short_link = FALSE)
#use gostplot to see anaylsis
gostplot(gostres, capped = TRUE, interactive = TRUE)
gostplot(gostres, capped = TRUE, interactive = TRUE)
#Load into R the expression data and matching metadata from GEO that you
#processed in Assignment 2.
library("readxl")
library(readr)
library(dbplyr)
expression_matrix <- read_tsv("./GoatDataModified.tsv")
meta_matrix <-read.csv("./gse_matrix2.csv", header = TRUE)
diff_exp <- read_xlsx("./deseq_df.xlsx")
#Get the table of gene names and their expression
gene_names <- expression_matrix[,1, drop = FALSE]
diff_exp <- cbind(gene_names, deseq_df)
#Subset to the 5,000 most variable genes
#Sort by increasing p value
diff_exp <- arrange(diff_exp,pvalue)
#Load into R the expression data and matching metadata from GEO that you
#processed in Assignment 2.
library("readxl")
library(readr)
library(dbplyr)
expression_matrix <- read_tsv("./GoatDataModified.tsv")
meta_matrix <-read.csv("./gse_matrix2.csv", header = TRUE)
diff_exp <- read_xlsx("./deseq_df.xlsx")
#Get the table of gene names and their expression
gene_names <- expression_matrix[,1, drop = FALSE]
diff_exp <- cbind(gene_names, deseq_df)
#Subset to the 5,000 most variable genes
#Sort by increasing p value
diff_exp <- arrange(diff_exp,pvalue)
diff_exp <- arrange(diff_exp,pvalue)
library(dbplyr)
diff_exp <- arrange(diff_exp,pvalue)
library(dplyr)
diff_exp <- arrange(diff_exp,pvalue)
#Subset the first 5000 rows
diff_exp <-head(diff_exp, 5000)
#Join the genes from diff_exp to a
significant_genes <- diff_exp$Gene
expression_matrix_5000 <- merge(significant_genes,expression_matrix)
View(expression_matrix_5000)
expression_matrix_5000 <- merge(significant_genes,expression_matrix, by = "Gene")
expression_matrix_5000 <- merge(x = significant_genes,y = expression_matrix, by = "Gene")
expression_matrix_5000 <- intersect(x = significant_genes,y = expression_matrix, by = "Gene")
expression_matrix_5000 <- intersect(x = significant_genes,y = expression_matrix)
expression_matrix_5000 <- inner_join(significant_genes,expression_matrix)
significant_genes <- data.frame(diff_exp$Gene)
View(significant_genes)
expression_matrix_5000 <- inner_join(significant_genes,expression_matrix)
expression_matrix_5000 <- inner_join(significant_genes,expression_matrix, by = "Gene")
colnames(significant_genes)[1] = "Gene"
expression_matrix_5000 <- inner_join(significant_genes,expression_matrix, by = "Gene")
View(expression_matrix_5000)
#Load into R the expression data and matching metadata from GEO that you
#processed in Assignment 2.
library("readxl")
library(readr)
library(dplyr)
expression_matrix <- read_tsv("./GoatDataModified.tsv")
meta_matrix <-read.csv("./gse_matrix2.csv", header = TRUE)
diff_exp <- read_xlsx("./deseq_df.xlsx")
#Get the table of gene names and their expression
gene_names <- expression_matrix[,1, drop = FALSE]
diff_exp <- cbind(gene_names, deseq_df)
#Subset to the 5,000 most variable genes
#Sort by increasing p value
diff_exp <- arrange(diff_exp,pvalue)
#Subset the first 5000 rows
diff_exp <-head(diff_exp, 5000)
#Join the genes from diff_exp to a gene matrix
significant_genes <- data.frame(diff_exp$Gene)
colnames(significant_genes)[1] = "Gene"
expression_matrix_5000 <- inner_join(significant_genes,expression_matrix, by = "Gene")
#Method 1:ConsensusClusterPlus
library("ConsensusClusterPlus")
results = ConsensusClusterPlus(expression_matrix_5000,maxK=6,reps=50,pItem=0.8,pFeature=1,
+ title=title,clusterAlg="hc",distance="pearson",seed=1262118388.71279,plot="png")
ConsensusClusterPlus(
expression_matrix_5000, maxK = 3, reps=10, pItem=0.8, pFeature=1, clusterAlg="hc",title="untitled_consensus_cluster",
innerLinkage="average", finalLinkage="average", distance="pearson", ml=NULL,
tmyPal=NULL,seed=NULL,plot=NULL,writeTable=FALSE,weightsItem=NULL,weightsFeature=NULL,verbose=F,corUse="everything")
ConsensusClusterPlus(
d = expression_matrix_5000, maxK = 3, reps=10, pItem=0.8, pFeature=1, clusterAlg="hc",title="untitled_consensus_cluster",
innerLinkage="average", finalLinkage="average", distance="pearson", ml=NULL,
tmyPal=NULL,seed=NULL,plot=NULL,writeTable=FALSE,weightsItem=NULL,weightsFeature=NULL,verbose=F,corUse="everything")
matrix_5000 <- as.matrix(expression_matrix_5000)
View(matrix_5000)
ConsensusClusterPlus(
d = matrix_5000, maxK = 3, reps=10, pItem=0.8, pFeature=1, clusterAlg="hc",title="untitled_consensus_cluster",
innerLinkage="average", finalLinkage="average", distance="pearson", ml=NULL,
tmyPal=NULL,seed=NULL,plot=NULL,writeTable=FALSE,weightsItem=NULL,weightsFeature=NULL,verbose=F,corUse="everything")
matrix_5000 <- as.matrix(expression_matrix_5000)
matrix_5000<-matrix_5000[,-1] # delete column of genes
ConsensusClusterPlus(
d = matrix_5000, maxK = 3, reps=10, pItem=0.8, pFeature=1, clusterAlg="hc",title="untitled_consensus_cluster",
innerLinkage="average", finalLinkage="average", distance="pearson", ml=NULL,
tmyPal=NULL,seed=NULL,plot=NULL,writeTable=FALSE,weightsItem=NULL,weightsFeature=NULL,verbose=F,corUse="everything")
results = ConsensusClusterPlus(matrix_5000,maxK=6,reps=50,pItem=0.8,pFeature=1,
+ title=title,clusterAlg="hc",distance="pearson",
results = ConsensusClusterPlus(matrix_5000,maxK=6,reps=50,pItem=0.8,pFeature=1,
title=title,clusterAlg="hc",distance="pearson",
seed=1262118388.71279,plot="png")
title=tempdir()
results = ConsensusClusterPlus(matrix_5000,maxK=6,reps=50,pItem=0.8,pFeature=1,
title=title,clusterAlg="hc",distance="pearson",
seed=1262118388.71279,plot="png")
rcc = ConsensusClusterPlus(matrix_5000,maxK=4,reps=100,pItem=0.8,pFeature=1,
title="example",distance="pearson",clusterAlg="hc")
matrix_5000 <- as.numeric(matrix_5000)
rcc = ConsensusClusterPlus(matrix_5000,maxK=4,reps=100,pItem=0.8,pFeature=1,
title="example",distance="pearson",clusterAlg="hc")
matrix_5000<-matrix_5000[,-1] # delete column of genes
matrix_5000<-matrix_5000[,-1] # delete column of genes
expression_matrix_5000 <- inner_join(significant_genes,expression_matrix, by = "Gene")
matrix_5000 <- expression_matrix_5000
matrix_5000<-matrix_5000[,-1] # delete column of genes
View(matrix_5000)
matrix_5000 <- as.numeric(matrix_5000)
matrix_5000 <- matrix_5000 %>%
rename(1 = 1)
matrix_5000 <- expression_matrix_5000
matrix_5000<-matrix_5000[,-1] # delete column of genes
names(matrix_5000)<−NULL
col_names(matrix_5000)<−NULL
colnames(matrix_5000)<-NUMBERS[1:54]
colnames(matrix_5000)<-[1:54]
colnames(matrix_5000)<-NULL
matrix_5000 <- as.numeric(matrix_5000)
matrix_5000 <- as.matrix(expression_matrix_5000)
matrix_5000 <- expression_matrix_5000
matrix_5000<-matrix_5000[,-1] # delete column of genes
colnames(matrix_5000)<-NULL
matrix_5000 <- as.matrix(expression_matrix_5000)
matrix_5000 <- expression_matrix_5000
matrix_5000<-matrix_5000[,-1] # delete column of genes
colnames(matrix_5000)<-NULL
matrix_5000 <- as.matrix(matrix_5000)
matrix_5000 <- as.numeric(matrix_5000)
matrix_5000 <- expression_matrix_5000
matrix_5000<-matrix_5000[,-1] # delete column of genes
colnames(matrix_5000)<-NULL
matrix_5000 <- as.matrix(matrix_5000)
rcc = ConsensusClusterPlus(matrix_5000,maxK=4,reps=100,pItem=0.8,pFeature=1,
title="example",distance="pearson",clusterAlg="hc")
resICL = calcICL(rcc,title="example")
rcc = ConsensusClusterPlus(matrix_5000,maxK=2,reps=100,pItem=0.8,pFeature=1,
title="example",distance="pearson",clusterAlg="hc")
rcc = ConsensusClusterPlus(matrix_5000,maxK=3,reps=100,pItem=0.8,pFeature=1,
title="example",distance="pearson",clusterAlg="hc")
resICL = calcICL(rcc,title="example")
#Load into R the expression data and matching metadata from GEO that you
#processed in Assignment 2.
library("readxl")
library(readr)
library(dplyr)
expression_matrix <- read_tsv("./GoatDataModified.tsv")
meta_matrix <-read.csv("./gse_matrix2.csv", header = TRUE)
diff_exp <- read_xlsx("./deseq_df.xlsx")
#Get the table of gene names and their expression
gene_names <- expression_matrix[,1, drop = FALSE]
diff_exp <- cbind(gene_names, deseq_df)
#Subset to the 5,000 most variable genes
#Sort by increasing p value
diff_exp <- arrange(diff_exp,pvalue)
#Subset the first 5000 rows
diff_exp <-head(diff_exp, 5000)
#Join the genes from diff_exp to a gene matrix
significant_genes <- data.frame(diff_exp$Gene)
colnames(significant_genes)[1] = "Gene"
expression_matrix_5000 <- inner_join(significant_genes,expression_matrix, by = "Gene")
#Method 1:ConsensusClusterPlus
library("ConsensusClusterPlus")
matrix_5000 <- expression_matrix_5000
matrix_5000<-matrix_5000[,-1] # delete column of genes
colnames(matrix_5000)<-NULL
matrix_5000 <- as.matrix(matrix_5000)
rcc = ConsensusClusterPlus(matrix_5000,maxK=3,reps=100,pItem=0.8,pFeature=1,
title="example",distance="pearson",clusterAlg="hc")
resICL = calcICL(rcc,title="example")
rcc = ConsensusClusterPlus(matrix_5000,maxK=4,reps=100,pItem=0.8,pFeature=1,
title="example",distance="pearson",clusterAlg="hc")
resICL = calcICL(rcc,title="example")
rcc = ConsensusClusterPlus(matrix_5000,maxK=5,reps=100,pItem=0.8,pFeature=1,
title="example",distance="pearson",clusterAlg="hc")
resICL = calcICL(rcc,title="example")
rcc = ConsensusClusterPlus(matrix_5000,maxK=20,reps=1000,pItem=0.8,pFeature=1,
title="example",distance="pearson",clusterAlg="hc")
resICL = calcICL(rcc,title="example")
rcc = ConsensusClusterPlus(matrix_5000,maxK=20,reps=1000,pItem=0.8,pFeature=1,
title="example",distance="pearson",clusterAlg="hc")
res.nbclust <- NbClust(matrix_5000, distance = "euclidean",
min.nc = 2, max.nc = 9,
method = "complete", index ="all")
install.packages("NbClust")
library("nbclust")
library("NbClust")
res.nbclust <- NbClust(matrix_5000, distance = "euclidean",
min.nc = 2, max.nc = 9,
method = "complete", index ="all")
NbClust(matrix_5000, distance = "euclidean",
min.nc = 2, max.nc = 9,
method = "complete", index ="all")
library("NbClust")
NbClust(matrix_5000, distance = "euclidean",
min.nc = 2, max.nc = 9,
method = "complete", index ="all")
NbClust(matrix_5000, distance = "euclidean",
min.nc = 2, max.nc = 9,
method = "median", index ="gplus")
rcc = ConsensusClusterPlus(matrix_5000,maxK=5,reps=1000,pItem=0.8,pFeature=1,
title="example",distance="pearson",clusterAlg="hc")
#resICL = calcICL(rcc,title="example")
calcICL(rcc,title="untitled_consensus_cluster",plot=pdf,writeTable=FALSE)
calcICL(rcc,title="untitled_consensus_cluster")
BiocManager::install("ClusterR")
install.packages(ClusterR)
install.packages("ClusterR")
#Method 2: Gaussian Mixture Models
library(ClusterR)
library(gtools)
library(ClusterR)
gmm = GMM(matrix_5000, 2, dist_mode = "maha_dist", seed_mode = "random_subset", km_iter = 10,
em_iter = 10, verbose = F)
gmm = GMM(matrix_5000, 2, dist_mode = "maha_dist", seed_mode = "random_subset", km_iter = 10,
em_iter = 10, verbose = F)
pr = predict(gmm, newdata = matrix_5000)
View(gmm)
opt_gmm = Optimal_Clusters_GMM(matrix_5000, max_clusters = 10, criterion = "BIC",
dist_mode = "maha_dist", seed_mode = "random_subset",
km_iter = 10, em_iter = 10, var_floor = 1e-10,
plot_data = T)
opt_gmm = Optimal_Clusters_GMM(matrix_5000, max_clusters = 20, criterion = "BIC",
dist_mode = "maha_dist", seed_mode = "random_subset",
km_iter = 20, em_iter = 20, var_floor = 1e-10,
plot_data = T)
opt_gmm = Optimal_Clusters_GMM(matrix_5000, max_clusters = 20, criterion = "BIC",
dist_mode = "maha_dist", seed_mode = "random_subset",
km_iter = 10, em_iter = 10, var_floor = 1e-10,
plot_data = T)
opt_gmm = Optimal_Clusters_GMM(matrix_5000, max_clusters = 30, criterion = "BIC",
dist_mode = "maha_dist", seed_mode = "random_subset",
km_iter = 10, em_iter = 10, var_floor = 1e-10,
plot_data = T)
km2 <- kmeans(matrix_5000, centers = 2, nstart = 30)
library(ggplot2)
km2 <- kmeans(matrix_5000, centers = 2, nstart = 30)
p1 <- fviz_cluster(km2, data = matrix_5000, frame.type = "convex") +
theme_minimal() + ggtitle("k = 2")
install.packages("kmeans")
library(tidyverse)
library(magrittr)
library(cluster)
library(cluster.datasets)
library(cowplot)
library(cowplot)
library(stats)
km2 <- kmeans(matrix_5000, centers = 2, nstart = 30)
View(km2)
p1 <- fviz_cluster(km2, data = matrix_5000, frame.type = "convex") +
theme_minimal() + ggtitle("k = 2")
library(ggplot2)
library(kmeans)
library(factoextra)
install.packages("factoextra")
library(factoextra)
km2 <- kmeans(matrix_5000, centers = 2, nstart = 30)
p1 <- fviz_cluster(km2, data = matrix_5000, frame.type = "convex") +
theme_minimal() + ggtitle("k = 2")
km2 <- kmean_calc(matrix_5000, 2)
km2 <- kmeans(matrix_5000, centers = 2, nstart = 30)
fviz_nbclust(matrix_5000, kmeans, method ="wss")
fvix_cluster(km2, data = matrix_5000)
km2
fviz_nbclust(matrix_5000, kmeans, method ="wss")
fvix_cluster(kmeans(matrix_5000, centers = 2, nstart = 100), data = matrix_5000)
fviz_cluster(kmeans(matrix_5000, centers = 2, nstart = 100), data = matrix_5000)
km2 <- kmeans(matrix_5000, centers = 5, nstart = 100)
fviz_nbclust(matrix_5000, kmeans, method ="wss")
fviz_cluster(kmeans(matrix_5000, centers = 5, nstart = 100), data = matrix_5000)
